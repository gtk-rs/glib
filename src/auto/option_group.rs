// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use ffi as glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;
use translate::*;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct OptionGroup(Shared<ffi::GOptionGroup>);

    match fn {
        ref => |ptr| ffi::g_option_group_ref(ptr),
        unref => |ptr| ffi::g_option_group_unref(ptr),
        get_type => || ffi::g_option_group_get_type(),
    }
}

impl OptionGroup {
    //pub fn new<'a, P: Into<Option<&'a /*Unimplemented*/DestroyNotify>>>(name: &str, description: &str, help_description: &str, destroy: P) -> OptionGroup {
    //    unsafe { TODO: call ffi::g_option_group_new() }
    //}

    //pub fn add_entries(&self, entries: /*Ignored*/&OptionEntry) {
    //    unsafe { TODO: call ffi::g_option_group_add_entries() }
    //}

    //pub fn set_error_hook(&self, error_func: /*Unknown conversion*//*Unimplemented*/OptionErrorFunc) {
    //    unsafe { TODO: call ffi::g_option_group_set_error_hook() }
    //}

    //pub fn set_parse_hooks<'a, 'b, P: Into<Option<&'a /*Unimplemented*/OptionParseFunc>>, Q: Into<Option<&'b /*Unimplemented*/OptionParseFunc>>>(&self, pre_parse_func: P, post_parse_func: Q) {
    //    unsafe { TODO: call ffi::g_option_group_set_parse_hooks() }
    //}

    //pub fn set_translate_func<'a, 'b, P: Into<Option<&'a /*Unimplemented*/TranslateFunc>>, Q: Into<Option</*Unimplemented*/Fundamental: Pointer>>, R: Into<Option<&'b /*Unimplemented*/DestroyNotify>>>(&self, func: P, data: Q, destroy_notify: R) {
    //    unsafe { TODO: call ffi::g_option_group_set_translate_func() }
    //}

    pub fn set_translation_domain(&self, domain: &str) {
        unsafe {
            ffi::g_option_group_set_translation_domain(self.to_glib_none().0, domain.to_glib_none().0);
        }
    }
}
